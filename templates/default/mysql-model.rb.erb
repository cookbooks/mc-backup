# encoding: utf-8

##
# Backup Generated: mysql
# Once configured, you can run the backup with the following command:
#
# $ backup perform -t mysql [-c <path_to_configuration_file>]
#
Backup::Model.new(:mysql, 'Description for mysql') do
  ##
  # Split [Splitter]
  #
  # Split the backup file in to chunks of 250 megabytes
  # if the backup file size exceeds 250 megabytes
  #
  split_into_chunks_of <%= @chunks %>

  ##
  # MySQL [Database]
  #
  database MySQL do |db|
    # To dump all databases, set db.name = :all (or leave blank)
    <% if @database %>
    db.name               = "<%= @database %>"
    <% end %>

    db.username           = "<%= @username %>"
    db.password           = "<%= @password %>"
    db.host               = "<%= @host %>"
    db.port               = <%= @port %>
    db.socket             = "<%= @socket %>"

    <% if @skip_tables %>
    db.skip_tables        = <%= @skip_tables %>
    <% end %>

    <% if @only_tables %>
    db.only_tables        = <%= @only_tables %>
    <% end %>

    <% if @additional_options %>
    db.additional_options = <%= @additional_options %>
    <% end %>

    # Optional: Use to set the location of this utility
    #   if it cannot be found by name in your $PATH
    # db.mysqldump_utility = "/opt/local/bin/mysqldump"
  end


  <% if @cloudfiles %>
  ##
  # Rackspace Cloud Files [Storage]
  #
  # Available Auth URLs:
  #
  #  - https://auth.api.rackspacecloud.com     (US - Default)
  #  - https://lon.auth.api.rackspacecloud.com (UK)
  #
  # Servicenet:
  #
  #  Set this to 'true' if Backup runs on a Rackspace server. It will avoid
  #  transfer charges and it's more performant.
  #
  store_with CloudFiles do |cf|
    cf.api_key    = <%= @cloudfiles_api_key %>
    cf.username   = <%= @cloudfiles_username %>
    cf.container  = <%= @cloudfiles_container %>
    cf.path       = <%= @cloudfiles_path %>
    cf.keep       = <%= @cloudfiles_keep %>
    cf.auth_url   = <%= @cloudfiles_auth_url %>
    cf.servicenet = <%= @cloudfiles_servicenet %>
  end
  <% end %>

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip do |compression|
    compression.best = true
    compression.fast = false
  end

end
