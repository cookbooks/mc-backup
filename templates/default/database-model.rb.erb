# encoding: utf-8

##
# Backup Generated: mysql
# Once configured, you can run the backup with the following command:
#
# $ backup perform -t mysql [-c <path_to_configuration_file>]
#
Backup::Model.new(:'<%= @resource.label %>', 'Description for database') do
  ##
  # Split [Splitter]
  #
  # Split the backup file in to chunks of 250 megabytes
  # if the backup file size exceeds 250 megabytes
  #
  split_into_chunks_of <%= @resource.chunks %>

<% case @resource.database %>
<% when "mysql" then %>
  ##
  # MySQL [Database]
  #
  database MySQL do |db|
    # To dump all databases, set db.name = :all (or leave blank)
    <% if @resource.mysql_database_name %>
    db.name               = "<%= @resource.mysql_database_name %>"
    <% end %>

    db.username           = "<%= @resource.mysql_username %>"
    db.password           = "<%= @resource.mysql_password %>"
    db.host               = "<%= @resource.mysql_host %>"
    db.port               = <%= @resource.mysql_port %>
    db.socket             = "<%= @resource.mysql_socket %>"

    <% if @resource.mysql_skip_tables %>
    db.skip_tables        = %w[ <%= @resource.mysql_skip_tables.join(' ') %> ]
    <% end %>

    <% if @resource.mysql_only_tables %>
    db.only_tables        = %w[ <%= @resource.mysql_only_tables.join(' ') %> ]
    <% end %>

    <% if @resource.mysql_additional_options %>
    db.additional_options = %w[ <%= @resource.mysql_additional_options.join(' ') %> ]
    <% end %>

    # Optional: Use to set the location of this utility
    #   if it cannot be found by name in your $PATH
    # db.mysqldump_utility = "/opt/local/bin/mysqldump"
  end
<% when "mongodb" then %>
  ##
  # MongoDB [Database]
  #
  database MongoDB do |db|
   # To dump all databases, set db.name = :all (or leave blank)
   <% if @resource.mongodb_database_name %>
   db.name               = "<%= @resource.mongodb_database_name %>"
   <% end %>
    db.username           = "<%= @resource.mongodb_username %>"
    db.password           = "<%= @resource.mongodb_password %>"
    db.host               = "<%= @resource.mongodb_host %>"
    db.port               = <%= @resource.mongodb_port %>
    db.ipv6               = <%= @resource.mongodb_ipv6 %>
    db.lock               = <%= @resource.mongodb_lock %>

    <% if @resource.mongodb_only_collections %>
    db.only_collections = %w[ <%= @resource.mongodb_only_collections.join(' ') %> ]
    <% end %>
   
    <% if @resource.mongodb_additional_options %>
    db.additional_options = %w[ <%= @resource.mongodb_additional_options.join(' ') %> ]
    <% end %>

    # Optional: Use to set the location of these utilities
    #   if they cannot be found by their name in your $PATH
    # db.mongodump_utility = "/opt/local/bin/mongodump"
    # db.mongo_utility     = "/opt/local/bin/mongo"
  end
<% end %>

  <% if @resource.storage == "cloudfiles" %>
  ##
  # Rackspace Cloud Files [Storage]
  #
  # Available Auth URLs:
  #
  #  - https://auth.api.rackspacecloud.com     (US - Default)
  #  - https://lon.auth.api.rackspacecloud.com (UK)
  #
  # Servicenet:
  #
  #  Set this to 'true' if Backup runs on a Rackspace server. It will avoid
  #  transfer charges and it's more performant.
  #
  store_with CloudFiles do |cf|
    cf.api_key    = "<%= @resource.cloudfiles_api_key %>"
    cf.username   = "<%= @resource.cloudfiles_username %>"
    cf.container  = "<%= @resource.cloudfiles_container %>"
    cf.path       = "<%= @resource.cloudfiles_path %>"
    cf.keep       = <%= @resource.cloudfiles_keep %>
    cf.auth_url   = "<%= @resource.cloudfiles_auth_url %>"
    cf.servicenet = <%= @resource.cloudfiles_servicenet %>
  end
  <% end %>

  ##
  # Gzip [Compressor]
  #
  compress_with Gzip do |compression|
    compression.best = true
    compression.fast = false
  end

end
